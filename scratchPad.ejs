<!-- an input field -->
<div class="flex-auto">
    <input type="text" name="title" placeholder="Whom to elect next?"
      class="border border-blue-600 rounded text-gray-900 w-full p-2 text-sm">
  </div>


<!-- a button -->
  <button
                class="bg-blue-600 hover:bg-blue-800 text-white px-5 py-1.5 rounded font-medium mr-2 mb-2">Create</button>

<!-- election naming form -->

<!-- question and description -->
<div class="flex-auto pb-2">
  <input type="text" name="title" placeholder="Add a question (disbled for now)"
      class="border border-blue-600 rounded text-gray-900 w-full p-2 text-sm" disabled>
</div>
<div class="flex-auto pb-2">
  <textarea name="description" id="description" cols="30" rows="5"
      placeholder="Description of the question (disabled for now)"
      class="border border-blue-600 rounded text-gray-900 w-full p-2 text-sm leading-10"
      disabled></textarea>
</div>


<!-- form of questions -->


<div class="option-div rounded flex w-fit items-center my-2 px-2 py-1 hover:bg-sky-100 block">
  <input placeholder="Add 1 option" type="text" name="option 1" id=""
      class="border border-blue-600 rounded text-gray-900 p-2 text-sm">
  <a href="" class="hidden removeOption-icon" onclick="removeOption()" title="Remove option">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
  </a>
</div>

<div class="option-div rounded flex w-fit items-center my-2 px-2 py-1 hover:bg-sky-100 block">
  <input placeholder="Add 2 option" type="text" name="option 2" id=""
      class="border border-blue-600 rounded text-gray-900 p-2 text-sm">
  <a href="" class="hidden removeOption-icon" title="Remove option">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="M15 12H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
  </a>
</div>

<!-- more options -->
<div id="moreOptions"></div>
<!-- mpore options -->

<div class="flex items-center justify-between gap-2 mt-2">
  <button
      class="text-lg text-center font-bold zease-in-out duration-300 text-white rounded py-2 px-2 bg-blue-600 hover:bg-blue-800 w-full "
      onclick="addOptions(); return false">Add more options</button>
  <button
      class="text-lg text-center font-bold ease-in-out duration-300 text-white rounded py-2 px-2 bg-blue-600 hover:bg-blue-800 w-full "
      onclick="addQuestion();return false">Add another question</button>
</div>



app.get("/createQuestions",(request,response)=>{
  response.render("createQuestions",{
    title: "Add questions",
      csrfToken: request.csrfToken(),
  })
})

app.post("/createQuestions",async (response,request)=>{
  console.log(request.body)
  try {
    const question = await Questions.addQuestion({
      question: request.body.question,
      description: request.body.description,
      electionId: request.election.id,
    });
  } catch (error) {
    console.log(error);
    error.errors.forEach((element) => {
      request.flash("error", element.message);
    });
  }
})

questionForm = document.getElementById('questionUpdate')
            questionForm.value = questionbody.question
            updateQuestionHTML = ''

            /* eslint-disable no-unused-vars */
"use strict";
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable("options", {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER,
      },
      optionTitle: {
        type: Sequelize.STRING,
        allowNull: false,
      },
      createdAt: {
        unique: true,
        allowNull: false,
        type: Sequelize.DATE,
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
      },
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable("options");
  },
};


"use strict";
const { Model } = require("sequelize");
module.exports = (sequelize, DataTypes) => {
  class options extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      options.belongsTo(models.Questions, {
        foreignKey: "questionId",
        onDelete: "CASCADE",
      });
    }

    static addOption({ title, questionId }) {
      return this.create({ optionTitle: title, questionId });
    }
  }
  options.init(
    {
      optionTitle: DataTypes.STRING,
    },
    {
      sequelize,
      modelName: "options",
    }
  );
  return options;
};


"use strict";
const { Model } = require("sequelize");
module.exports = (sequelize, DataTypes) => {
  class options extends Model {
    /**
     * Helper method for defining associations.
     * This method is not a part of Sequelize lifecycle.
     * The `models/index` file will call this method automatically.
     */
    static associate(models) {
      // define association here
      options.belongsTo(models.Questions, {
        foreignKey: "questionId",
        onDelete: "CASCADE",
      });
    }

    static addOption({ title, questionId }) {
      return this.create({ optionTitle: title, questionId });
    }
  }
  options.init(
    {
      optionTitle: DataTypes.STRING,
    },
    {
      sequelize,
      modelName: "options",
    }
  );
  return options;
};
